@using Zwoo.Dashboard.Data
@using System.Security.Claims
@using Microsoft.Extensions.Options

@inherits LayoutComponentBase

@inject NavigationManager UriHelper
@inject ZiadOptions Options


<PageTitle>ZIAD</PageTitle>

<AuthorizeView>
    <Authorized>
        <AuthorizeView Roles="@Options.Auth.Role" Context="outerContext">
            <Authorized>
                <RadzenLayout>
                    <RadzenHeader>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                            <RadzenLabel>
                                <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.Span" Class="rz-m-0">
                                    <span class="longName">
                                        Zwoo Informations und
                                        Administrations
                                        Dashboard
                                    </span>
                                    <span class="shortName">ZIAD</span>
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" TagName="TagName.Span" Class="rz-m-0 rz-ml-2">
                                    @("@") @Options.App.AppVersion</RadzenText>
                            </RadzenLabel>
                            <RadzenProfileMenu style="margin-left: auto;">
                                <Template>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                        <RadzenText TagName="TagName.P" Class="rz-mr-4 rz-mb-0">
                                            @context.User.FindFirst("preferred_username")?.Value
                                            (@context.User.FindFirst(ClaimTypes.Email)?.Value)
                                        </RadzenText>
                                        <RadzenGravatar Email="@context.User.FindFirst(ClaimTypes.Email)?.Value">
                                        </RadzenGravatar>
                                    </RadzenStack>
                                </Template>
                                <ChildContent>
                                    <RadzenProfileMenuItem Text="Logout" Path="logout" Icon="logout">
                                    </RadzenProfileMenuItem>
                                </ChildContent>
                            </RadzenProfileMenu>
                        </RadzenStack>
                    </RadzenHeader>
                    <RadzenSidebar @bind-Expanded="@sidebarExpanded">
                        <NavMenu />
                    </RadzenSidebar>
                    <RadzenBody>
                        <div class="rz-p-4">
                            @Body
                        </div>
                    </RadzenBody>
                </RadzenLayout>
                <RadzenDialog />
            </Authorized>
            <NotAuthorized>
                Missing Role @Options.Auth.Role
                <a href="logout">Logout</a>
            </NotAuthorized>
        </AuthorizeView>
    </Authorized>
    <NotAuthorized>
        <div id="notAuthorized">
            <RadzenCard>
                <RadzenStack AlignItems="AlignItems.Center">
                    <h1>Zwoo Admin Info Dashboard</h1>
                    <a href="/login">
                        <RadzenButton Variant="Variant.Outlined" Text="Login with OIDC"
                            ButtonStyle="ButtonStyle.Primary" />
                    </a>
                </RadzenStack>
            </RadzenCard>
            @{
                var uri = UriHelper.ToAbsoluteUri(UriHelper.Uri);
                var shouldRedirect = true;
                if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("noredirect", out var noRedirect))
                {
                    shouldRedirect = false;
                }

                if (shouldRedirect)
                {
                    var returnUrl = UriHelper.ToBaseRelativePath(UriHelper.Uri);
                    UriHelper.NavigateTo($"login?redirectUri={returnUrl}", forceLoad: true);
                }
            }
        </div>
    </NotAuthorized>
    <Authorizing>Loading...</Authorizing>
</AuthorizeView>

@code {
    bool sidebarExpanded = true;
}