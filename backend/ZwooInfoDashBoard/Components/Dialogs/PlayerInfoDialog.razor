@inject IDatabase _db
@inject IUserService _userService
@inject IAuthService _auth
@inject IAuditTrailService _auditService
@inject DialogService DialogService

<RadzenCard>
@if(_player != null)
{
    <div class="d-flex flex-row">
        <h3>@_player.Username</h3>
        @if (_player.Verified == true)
        {
            <RadzenIcon Icon="check_circle_outline" IconStyle="IconStyle.Success" Style="margin-left: 5px; margin-bottom: 5px"/>
        }
        else
        {
            <RadzenIcon Icon="highlight_off" IconStyle="IconStyle.Danger" Style="margin-left: 5px; margin-bottom: 5px"/>
        }
        
    </div>
    <p>@($"ID: {_player.Id}")</p>
    <p>@($"Email: {_player.Email}")</p>
    <p>@($"Games: {_gamesPlayed.Count()}")</p>
    <p>@($"Wins: {_player.Wins}")</p>
    @if (_player.AcceptedTerms && _player.AcceptedTermsAt != null)
    {
        <p>@($"Terms: Accepted {DateTimeOffset.FromUnixTimeMilliseconds(_player.AcceptedTermsAt.Value).ToString("dd.MM.yy HH:mm:ss")}")</p>
    } else if (_player.AcceptedTerms) {
        <p>Terms: Accepted (beta)</p>
    }
    @if (_player.Verified && _player.VerifiedAt != null)
    {
        <p>@($"Verified: {DateTimeOffset.FromUnixTimeMilliseconds(_player.VerifiedAt.Value).ToString("dd.MM.yy HH:mm:ss")}")</p>
    }
    @if (_player.BetaCode != null)
    {
        <p>@($"Betacode: {_player.BetaCode}")</p>
    }
}    
</RadzenCard>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Account Events">
            <RadzenDataGrid AllowFiltering="true" AllowGrouping="true" AllowSorting="true" AllowPaging="true" PageSize="20" 
                            TItem="AccountEventDao" Data="_events" AllowVirtualization="true">
                <Columns>
                    <RadzenDataGridColumn TItem="AccountEventDao" Property="EventType" Title="Event"/>
                    <RadzenDataGridColumn TItem="AccountEventDao" Property="Success" Title="Success">
                        <Template Context="info">
                            @info.Success.ToString()
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AccountEventDao" Property="TimeStamp" Title="Time">
                        <Template Context="aevent">
                            @DateTimeOffset.FromUnixTimeSeconds((long)aevent.TimeStamp).ToString("dd.MM.yy HH:mm:ss")
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Sessions">
            <RadzenDataGrid AllowFiltering="false" AllowGrouping="false" AllowSorting="false" AllowPaging="true" PageSize="20"
                            TItem="string" Data="_player?.Sid" AllowVirtualization="true">
                <Columns>
                    <RadzenDataGridColumn TItem="string" Property="this" Title="Session ID"/>
                    <RadzenDataGridColumn TItem="string" Filterable="false" Sortable="false" Groupable="false" TextAlign="TextAlign.Center" Width="60px">
                        <Template Context="sid">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => DeleteRow(sid))"  @onclick:stopPropagation="true" />
                        </Template>
                        <EditTemplate Context="sid">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Click="@(args => DeleteRow(sid))" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Games Played">
            <RadzenDataGrid AllowFiltering="true" AllowGrouping="true" AllowSorting="true" AllowPaging="true" PageSize="25"
                            ExpandMode="DataGridExpandMode.Single" RowRender="@RenderRow"
                            TItem="GameInfoDao" Data="_gamesPlayed" AllowVirtualization="true">
                <Template Context="info">
                    <p>Scoreboard:</p>
                    <RadzenDataGrid TItem="PlayerScoreDao" Data="info.Scores">
                        <Columns>
                            <RadzenDataGridColumn TItem="PlayerScoreDao" Property="Score" Title="Score"/>
                            <RadzenDataGridColumn TItem="PlayerScoreDao" Property="PlayerUsername" Title="Name"/>
                        </Columns>
                    </RadzenDataGrid>
                </Template>
                <Columns>
                    <RadzenDataGridColumn TItem="GameInfoDao" Property="GameId" Title="ID"/>
                    <RadzenDataGridColumn TItem="GameInfoDao" Property="GameName" Title="Name"/>
                    <RadzenDataGridColumn TItem="GameInfoDao" Property="TimeStamp" Title="Time">
                        <Template Context="info">
                            @DateTimeOffset.FromUnixTimeSeconds((long)info.TimeStamp).ToString("dd.MM.yy HH:mm:ss")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="GameInfoDao" Property="IsPublic" Title="Public">
                        <Template Context="info">
                            <RadzenCheckBox Disabled="true" Value="info.IsPublic"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="GameInfoDao" Property="Winner" Title="Winner" Sortable="false" Filterable="false"/>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Audit Events">
            <RadzenDataGrid AllowFiltering="true" AllowGrouping="false" AllowSorting="true" AllowPaging="true" PageSize="25"
                            ExpandMode="DataGridExpandMode.Single" RowRender="@RenderAudit"
                            TItem="AuditEventDao" Data="_audits" AllowVirtualization="true">
                <Template Context="evt">
                    <p>ID: @evt.Id</p>
                    <div style="display: grid; grid-template-columns: 1fr 1fr">
                        <ObjectView ObjectData="@evt.NewValue" DiffTo="@evt.OldValue"/>
                        @if (evt.OldValue != null) {
                            <ObjectView ObjectData="@evt.OldValue" DiffTo="@evt.NewValue" IsDiffPositive="@false"/>
                        }
                        else {
                            @("<null>");
                        }
                    </div>
                </Template>
                <Columns>
                    <RadzenDataGridColumn TItem="AuditEventDao" Property="Timestamp" Title="Time">
                        <Template Context="evt">
                            @DateTimeOffset.FromUnixTimeMilliseconds((long)evt.Timestamp).ToString("dd.MM.yy HH:mm:ss")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="AuditEventDao" Property="Actor" Title="Actor"/>
                    <RadzenDataGridColumn TItem="AuditEventDao" Property="Message" Title="Message" />
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    [Parameter] public ulong Id { set; get; }

    private UserDao? _player { get; set; } = null;
    private IEnumerable<AccountEventDao> _events { get; set; } = new List<AccountEventDao>();
    private IEnumerable<AuditEventDao> _audits { get; set; } = new List<AuditEventDao>();
    
    private IEnumerable<GameInfoDao> _gamesPlayed
    {
        get => _db.GamesInfo.AsQueryable().Where(x => x.Scores.Any(z => _player != null && _player.Username == z.PlayerUsername));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _load();
    }

    private void _load()
    {
        _player = _userService.GetUserById(Id);
        if (_player != null)
        {
            _events = _db.AccountEvents.AsQueryable().Where(e => e.PlayerID == Id);
            _audits = _auditService.GetProtocol(_auditService.GetAuditId(_player))?.Events ?? new();
        }
        StateHasChanged();
    }
    
    
    private async void DeleteRow(string sid)
    {
        if (_player == null) return;
        var res = await DialogService.Confirm($"Are you sure that you want to delete the session id {sid} of user {_player.Username}", "Delete Session ID", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (res != true) return;

        _userService.LogoutUser(_player, sid,  AuditOptions.WithActor(AuditActor.Staff(_auth.Username)).AddMessage("deleted user session"));
        _load();
    }
    
    private void RenderRow(RowRenderEventArgs<GameInfoDao> args) => args.Expandable = true;
    private void RenderAudit(RowRenderEventArgs<AuditEventDao> args) => args.Expandable = true;
}

