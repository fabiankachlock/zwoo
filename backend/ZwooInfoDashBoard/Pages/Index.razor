@page "/"
@inject IDatabase _db
@inject IGameInfoService _gameInfo
@inject DialogService DialogService

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<h1>Home</h1>

<div class="container">
    <h1>Home</h1>
    <div class="row">
        <div class="col">
            <RadzenCard class="w-100">
                <h2>Statistics</h2>
                <div class="row w-100">
                    <div class="col">
                        <RadzenLabel Text="Played Games:"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="Players:"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="Not Verified:"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="Failed Login Attempts:"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="Used Beta Codes:"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="Available Beta Codes:"/>
                    </div>
                    <div class="col">
                        <RadzenLabel Text="@($"{_db.GamesInfo.AsQueryable().Count()}")"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="@($"{_db.Users.AsQueryable().Count()}")"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="@($"{_db.Users.AsQueryable().Count(x=> !x.Verified)}")"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="@($"{_db.AccountEvents.AsQueryable().Count(x => x.EventType == "login" && !x.Success)}")"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="@($"{_db.Users.AsQueryable().Count(x => x.BetaCode != null)}")"/>
                        <div class="w-100"></div>
                        <RadzenLabel Text="@($"{_db.BetaCodes.AsQueryable().Count()}")"/>
                    </div>
                </div>
            </RadzenCard>
            <RadzenCard class="w-100" Style="margin-top: 10px">
                <h2>Quick Actions</h2>
                <RadzenButton Icon="note_add" style="margin-bottom: 10px" class="w-100" Text="Add New Code" Click="@(async () => await DialogService.OpenAsync<NewBetaCode>("New Betacode", new Dictionary<string, object> { }, new DialogOptions { Width = "460px", Height = "180px", Resizable = false, Draggable = true }))"/>
                <RadzenButton Icon="search" style="margin-bottom: 10px" class="w-100" Text="Quick Find Player" Click="QuickFindPlayer"/>
                <RadzenButton Icon="create" class="w-100" Text="Add Version Changelog" Click="CreateVersion"/>
            </RadzenCard>
            <RadzenCard class="w-100" Style="margin-top: 10px">
                <h2>Graphs</h2>
                <RadzenChart>
                    <RadzenColumnSeries Data="_gamesPlayed" CategoryProperty="Day" ValueProperty="Amount" Title="Games">
                        <RadzenSeriesDataLabels Visible="true"/>
                    </RadzenColumnSeries>
                </RadzenChart>
                <RadzenChart>
                    <RadzenColumnSeries Data="_accountsCreated" CategoryProperty="Day" ValueProperty="Amount" Title="Created Accounts">
                        <RadzenSeriesDataLabels Visible="true"/>
                    </RadzenColumnSeries>
                </RadzenChart>
            </RadzenCard>
        </div>
        <div class="col">
            <RadzenCard>
                <h2>Leaderboard</h2>
                <RadzenDataGrid TItem="LeaderBoardPlayerDao" Data="_leaderboard.TopPlayers">
                    <Columns>
                        <RadzenDataGridColumn TItem="LeaderBoardPlayerDao" Title="Position">
                            <Template Context="player">
                                @(_leaderboard.TopPlayers.IndexOf(player) + 1).
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="LeaderBoardPlayerDao" Property="Username" Title="Name"/>
                        <RadzenDataGridColumn TItem="LeaderBoardPlayerDao" Property="Wins" Title="Wins"/>
                        <RadzenDataGridColumn TItem="LeaderBoardPlayerDao" TextAlign="TextAlign.Center" Width="60px">
                            <Template Context="player">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Class="m-1" Click="@(() => OpenPlayer(player.Username))"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    class DiagramData
    {
        public DiagramData(string d, int a)
        {
            Day = d;
            Amount = a;
        }

        public string Day { get; set; }
        public int Amount { get; set; }
    }

    private LeaderBoardDao _leaderboard { get; set; } = new LeaderBoardDao(new List<LeaderBoardPlayerDao>());

    private List<DiagramData> _gamesPlayed = new();
    private List<DiagramData> _accountsCreated = new();

    protected override void OnInitialized()
    {
        _leaderboard = _gameInfo.GetLeaderBoard();
        var s = DateTime.Today - TimeSpan.FromDays(6);
        var e = s + TimeSpan.FromDays(1);
        for (int i = 7; i != 0; i--)
        {
            // Played Games
            {
                var a = _db.GamesInfo.AsQueryable()
                    .Count(x => x.TimeStamp > (ulong)((DateTimeOffset)s).ToUnixTimeSeconds() && x.TimeStamp < (ulong)((DateTimeOffset)e).ToUnixTimeSeconds());
                _gamesPlayed.Add(new DiagramData(s.ToString("ddd"), a));
            }
            // Accounts created
            {
                var a = _db.AccountEvents.AsQueryable()
                    .Where(x => x.EventType == "create" && x.Success)
                    .Count(x => x.TimeStamp > (ulong)((DateTimeOffset)s).ToUnixTimeSeconds() && x.TimeStamp < (ulong)((DateTimeOffset)e).ToUnixTimeSeconds());
                _accountsCreated.Add(new DiagramData(s.ToString("ddd"), a));
            }
            
            s += TimeSpan.FromDays(1);
            e += TimeSpan.FromDays(1);
        }
    }

    private async Task OpenPlayer(string username)
    {
        var user = _db.Users.AsQueryable().FirstOrDefault(u => u.Username == username);
        await DialogService.OpenAsync<PlayerInfoDialog>("Player Info", new Dictionary<string, object> { { "id", user?.Id ?? 0 } }, new DialogOptions { Width = "700px", Height = "530px", Resizable = true, Draggable = true });
    }

    private async Task QuickFindPlayer()
    {
        var res = await DialogService.OpenAsync<QuickFindPlayerDialog>("Quick Find Player", new Dictionary<string, object> { }, new DialogOptions { Width = "460px", Height = "200px", Resizable = false, Draggable = true });
        if (res is UserDao usr)
            await OpenPlayer(usr.Username);
    }

    private async Task CreateVersion()
    {
        var res = await DialogService.OpenAsync<AddVersionDialog>("Create version", new Dictionary<string, object> { }, new DialogOptions { Width = "460px", Height = "200px", Resizable = false, Draggable = true });
        if (res is ChangelogDao changelog)
            await DialogService.OpenAsync<ChangelogEditDialog>("Edit Changelog", new Dictionary<string, object> { { "changelog", changelog } }, new DialogOptions { Width = "1300px", Height = "760px", Resizable = true, Draggable = true });
    }
}
