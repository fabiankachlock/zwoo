@page "/deleted-accounts"
@inject IDatabase _db;
@inject IUserService _userService;
@inject IAuditTrailService _auditTrails;
@inject IAuthService _auth;
@inject DialogService DialogService

<PageTitle>Deleted Accounts</PageTitle>

<h1>Deleted Accounts</h1>

<RadzenDataGrid TItem="AccountEventDao" Data="_events" @ref="_grid">
    <Columns>
        <RadzenDataGridColumn TItem="AccountEventDao" Property="PlayerID" Title="Id"/>
        <RadzenDataGridColumn TItem="AccountEventDao" Property="Success" Title="Success">
            <Template Context="info">
                @info.Success.ToString()
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AccountEventDao" Property="UserData.Username" Title="Username">
            <Template Context="ae">
                @ae.UserData!.Username
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AccountEventDao" Property="UserData.Email" Title="Username">
            <Template Context="ae">
                @ae.UserData!.Email
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AccountEventDao" Property="TimeStamp" Title="Time">
            <Template Context="info">
                @DateTimeOffset.FromUnixTimeSeconds((long)info.TimeStamp).ToString("dd.MM.yy HH:mm:ss")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="AccountEventDao" Filterable="false" Sortable="false" Groupable="false" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="ae">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="restore" Class="m-1" Click="@(args => RestoreAccount(ae))"  @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="ae">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="restore" Class="m-1" Click="@(args => RestoreAccount(ae))" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IQueryable<AccountEventDao> _events 
    {
        get => _db.AccountEvents.AsQueryable().Where(x => x.EventType == "delete" && x.UserData != null);
    }

    RadzenDataGrid<AccountEventDao> _grid = new RadzenDataGrid<AccountEventDao>();

    private async void RestoreAccount(AccountEventDao player)
    {
        var r = await DialogService.Confirm($"Do you really want to restore {player.UserData!.Username}s account?");
        if (r == null || !r.Value)
        {
            return;
        }

        if (player.UserData == null)
        {
            await DialogService.Confirm($"no user data");
            return;
        }
        if (_userService.ExistsUsername(player.UserData.Username))
        {
            await DialogService.Confirm($"Username already exists");
            return;
        }
        if (_userService.ExistsEmail(player.UserData.Email))
        {
            await DialogService.Confirm($"Email already exists");
            return;
        }

        var user = new UserDao(){
            Id = player.UserData.Id,
            Username = player.UserData.Username,
            Email = player.UserData.Email,
            Password = player.UserData.Password,
            Wins = player.UserData.Wins,
            Verified  = true,
        };
        player.UserData = null;

        _db.Users.InsertOne(user);
        _db.AccountEvents.ReplaceOne(e => e.Id == player.Id, player);
        _auditTrails.Protocol(_auditTrails.GetAuditId(user), new AuditEventDao(){
            Actor = AuditActor.Staff(_auth.Username),
            Message = "restored user account in admin dashboard",
            NewValue = user,
            OldValue = null,
        });
        await _grid.Reload();
    }

}