@page "/changelog-editor"
@inject IDatabase _db
@inject IChangelogService _changelogService
@inject DialogService DialogService

<PageTitle>Changelog Editor</PageTitle>
<h1>Changelog Editor</h1>

<RadzenButton Icon="add_circle_outline" Text="Add Version Changelog" Click="CreateVersion" style="margin-bottom: 10px"/>

<RadzenDataGrid AllowFiltering="true" AllowPaging="true" PageSize="25" @ref="_grid"
                               TItem="ChangelogDao" Data="_changelogs" AllowVirtualization="true">
    <Columns>
        <RadzenDataGridColumn TItem="ChangelogDao" Property="ChangelogVersion" Title="Version"/>
        <RadzenDataGridColumn TItem="ChangelogDao" Property="Public" Title="Public" Filterable="false" Width="100px">
            <Template Context="changelog">
                <RadzenSwitch @bind-Value=@changelog.Public Change=@(args => OnIsPublicChange(changelog, args))/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChangelogDao" Property="Changelog" Filterable="false" Sortable="false" Groupable="false" TextAlign="TextAlign.Center" Width="220px">
            <Template Context="changelog">
                <RadzenButton Text="Edit Changelog" Icon="edit" Click=@(args => OnEdit(changelog))/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private IQueryable<ChangelogDao> _changelogs
    {
        get => _db.Changelogs.AsQueryable();
    }
    RadzenDataGrid<ChangelogDao> _grid = null!;

    protected override void OnInitialized()
    {
        DialogService.OnClose += ((o) => _grid.Reload());
    }

    private void OnIsPublicChange(ChangelogDao changelog, bool? value)
    {
        changelog.Public = value ?? false;
        _changelogService.UpdateChangelog(changelog);
    }

    private void OnEdit(ChangelogDao changelog)
    {
        DialogService.Open<ChangelogEditDialog>("Edit Changelog", new Dictionary<string, object> { { "changelog", changelog } }, new DialogOptions { Width = "1300px", Height = "760px", Resizable = true, Draggable = true });
    }
    
    private async Task CreateVersion()
    {
        var res = await DialogService.OpenAsync<AddVersionDialog>("Create version", new Dictionary<string, object> { }, new DialogOptions { Width = "460px", Height = "200px", Resizable = false, Draggable = true });
        if (res is ChangelogDao changelog)
        {
            await DialogService.OpenAsync<ChangelogEditDialog>("Edit Changelog", new Dictionary<string, object> { { "changelog", changelog } }, new DialogOptions { Width = "1300px", Height = "760px", Resizable = true, Draggable = true });
        }
    }
}